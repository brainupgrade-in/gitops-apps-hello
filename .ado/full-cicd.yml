trigger: none

pool:
  # vmImage: 'ubuntu-latest'
  name: selfhosted

variables:
  dockerRegistryServiceConnection: 'docker-hub-credentials'
  dockerImageName: 'brainupgrade/gitops-apps-hello'
  dockerImageTag: '$(Build.SourceVersion)'
  appName: 'hello'
  trivyTemplateUrl: 'https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl'

stages:
- stage: BuildTestPush
  displayName: "Build and Push Docker Image"
  jobs:
  - job: BuildAndPushImage
    displayName: "Build and Push Docker Image"
    steps:
    - task: Docker@2
      displayName: 'Docker Build'
      inputs:
        command: 'build'
        repository: '$(dockerImageName)'
        dockerfile: '**/Dockerfile'
        tags: '$(dockerImageTag),latest'    

    - task: Bash@3
      displayName: 'Download Trivy HTML Template'
      inputs:
        targetType: 'inline'
        script: |
          curl -LO $(trivyTemplateUrl) 

    - task: Bash@3
      displayName: 'Run Trivy Image Scan'
      inputs:
        targetType: 'inline'
        script: |
          trivy image --download-db-only
          trivy image --severity HIGH,CRITICAL --exit-code 1 --format template --template '@html.tpl' --output image-cve.html $(dockerImageName):latest

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Trivy Image Scan Report'
      inputs:
        pathToPublish: 'image-cve.html'
        artifactName: 'Trivy-Image-Scan-Report'
        publishLocation: 'Container'
    - task: Docker@2
      displayName: 'Docker Push'
      inputs:
        command: 'push'
        repository: '$(dockerImageName)'
        dockerfile: '**/Dockerfile'
        containerRegistry: '$(dockerRegistryServiceConnection)'
        tags: '$(dockerImageTag),latest'    
- stage: e2e
  displayName: "E2E Deployment"
  jobs:
  - deployment: DeployToE2E
    displayName: "Deploy to E2E Environment"
    environment: 'e2e'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Check and Deploy to Kubernetes E2E Environment'
            inputs:
              targetType: 'inline'
              script: |
                if ! kubectl get deployment $(appName)-$(environmentName) ; then
                  echo "Deployment not found, deploying now..."
                  kubectl create deploy $(appName)-$(environmentName) --image=$(dockerImageName):$(dockerImageTag) 
                  kubectl set env deployment $(appName)-$(environmentName) ENVIRONMENT=$(environmentName) BUILD_ID=$(Build.BuildId) GIT_COMMIT_ID=$(dockerImageTag)
                  kubectl expose deployment $(appName)-$(environmentName) --port=8080 --target-port=8080 
                else
                  kubectl set image deployment $(appName)-$(environmentName) gitops-apps-hello=$(dockerImageName):$(dockerImageTag) 
                  kubectl set env deployment $(appName)-$(environmentName) ENVIRONMENT=$(environmentName) BUILD_ID=$(Build.BuildId) GIT_COMMIT_ID=$(dockerImageTag)
                fi
          - task: Bash@3
            displayName: "Verify Deployment"
            inputs:
              targetType: 'inline'
              script: |
                echo "Verifying the deployment..."
                kubectl get deploy -owide -l app=$(appName)-$(environmentName)
- stage: uat
  displayName: "UAT Deployment"
  jobs:
  - deployment: DeployToUAT
    displayName: "Deploy to UAT Environment"
    environment: 'uat'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Check and Deploy to Kubernetes UAT Environment'
            inputs:
              targetType: 'inline'
              script: |
                if ! kubectl get deployment $(appName)-$(environmentName) ; then
                  echo "Deployment not found, deploying now..."
                  kubectl create deploy $(appName)-$(environmentName) --image=$(dockerImageName):$(dockerImageTag) 
                  kubectl set env deployment $(appName)-$(environmentName) ENVIRONMENT=$(environmentName) BUILD_ID=$(Build.BuildId) GIT_COMMIT_ID=$(dockerImageTag)
                  kubectl expose deployment $(appName)-$(environmentName) --port=8080 --target-port=8080 
                else
                  kubectl set image deployment $(appName)-$(environmentName) gitops-apps-hello=$(dockerImageName):$(dockerImageTag) 
                  kubectl set env deployment $(appName)-$(environmentName) ENVIRONMENT=$(environmentName) BUILD_ID=$(Build.BuildId) GIT_COMMIT_ID=$(dockerImageTag)
                fi
          - task: Bash@3
            displayName: "Verify Deployment"
            inputs:
              targetType: 'inline'
              script: |
                echo "Verifying the deployment..."
                kubectl get deploy -owide -l app=$(appName)-$(environmentName)
